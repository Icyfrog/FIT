apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    // buildToolsVersion "29.0.0"
    defaultConfig {
        applicationId "com.example.fitmvp"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
        manifestPlaceholders = [
                JPUSH_PKGNAME : applicationId,
                JPUSH_APPKEY : "ff4a6be471a248b2325698d3", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
        ]

        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a', 'armeabi-v8a', 'x86', 'x86_64', 'mips', 'mips64'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        disable 'GoogleAppIndexingWarning'
    }
}

dependencies {
//为了照相功能加的
    implementation "com.android.support:support-v4:28.0.0"
    implementation "com.android.support:support-v13:28.0.0"
    implementation "com.android.support:cardview-v7:28.0.0"
    implementation "com.android.support:appcompat-v7:28.0.0"
    implementation "com.alibaba:fastjson:1.1.55.android"
//glide 图片加载
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'
    //动态权限申请库
    implementation 'pub.devrel:easypermissions:1.3.0'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    //implementation 'com.android.support:support-annotations:28.0.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.19.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation ('com.android.support.test.espresso:espresso-core:3.0.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
        //不导入依赖中的support-annotations，避免出现依赖冲突，会使用用户自己导入的包
    })
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    implementation 'com.android.support:recyclerview-v7:28'
    implementation 'com.android.support:design:28'
    implementation 'com.android.support:cardview-v7:28'
    implementation 'com.jakewharton:butterknife:7.0.1'
    annotationProcessor 'com.jakewharton:butterknife:7.0.1'
    // okhttp3
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okio:okio:1.14.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    // rxjava
    implementation "io.reactivex.rxjava2:rxjava:2.1.0"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.1" // 切线程时需要用到
    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0' // 和Rxjava结合必须用到
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0' // 解析json字符所用
    // JMessage
    implementation 'cn.jiguang.sdk:jmessage:2.9.0'  // 此处以J
    implementation 'cn.jiguang.sdk:jcore:2.0.0'
    // ActiveAndroid
    implementation 'com.michaelpardo:activeandroid:3.1.0-SNAPSHOT'
    // EventBus
    implementation 'org.greenrobot:eventbus:3.1.1'
    // 图片加载缓存
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation project(path: ':emoji')
}

List<String> dirs = [
        'main',     // main sample code; look here for the interesting stuff.
        'common',   // components that are reused by multiple samples
        'template'] // boilerplate code that is generated by the sample template process

